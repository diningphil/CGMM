# Dataset and Splits
data_root: DATA/
dataset_class: pydgn.data.dataset.TUDatasetInterface
dataset_name:  PROTEINS
data_splits_file:  DATA_SPLITS/CHEMICAL/PROTEINS/PROTEINS_outer10_inner1.splits


# Hardware
device: cpu # cpu | cuda
max_cpus: 4 # > 1 for parallelism
max_gpus: 0 # > 0 for gpu usage (device must be cuda though)
gpus_per_task: 1 # percentage of gpus to allocate for each task


# Data Loading
dataset_getter: provider.IncrementalDataProvider
data_loader:
  class_name:  torch_geometric.loader.DataLoader
  args:
    num_workers: 2
    pin_memory: False


# Reproducibility
seed: 42


# Experiment
result_folder: RESULTS
exp_name:  cgmm_classifier
experiment:  cgmm_classifier_task.ClassifierCGMMTask
higher_results_are_better:  True
evaluate_every: 1
final_training_runs: 1


grid:
  layer_config:
    model: cgmm.CGMM
    embeddings_folder: RESULTS/CGMM_EMBEDDINGS/
    checkpoint: True
    batch_size: 256
    shuffle: False
    previous_layers_to_use: "1"  # multiple layers: "1,2,4"
    concatenate_on_axis: 1  # must be > 0
    max_layers: 20
    layers: 20
    A: 1
    C: 20
    readout: probabilistic_readout.UnsupervisedProbabilisticNodeReadout
    emission: emission.IndependentMultivariateBernoulliEmission
    unibigram: True  # the experiment above will generate embeddings with both unigrams and unibigram representation
    aggregation:
      - sum
      - mean
    infer_with_posterior:
      - True
      - False
    epochs: 10
    engine: incremental_engine.IncrementalTrainingEngine
    loss: loss.CGMMLoss
    optimizer:
      - class_name: optimizer.CGMMOptimizer
        args:
          optimizer_class_name: torch.optim.Adam  # not used!
          accumulate_gradients: True  # for full batch training while using mini-batches
    scorer:
      - class_name: pydgn.training.callback.metric.MultiScore
        args:
          # used at model selection time. Should be the one on which to perform early stopping
          main_scorer: score.CGMMCompleteLikelihoodScore
          true_likelihood: score.CGMMTrueLikelihoodScore
    plotter: pydgn.training.callback.plotter.Plotter
    arbitrary_function_config: # Define the information for the arbitrary function
      shuffle: True
      batch_size:
        - 256
      checkpoint: True
      log_every: 1
      num_dataloader_workers: 0  # > 0 only with --debug option and GPU device
      pin_memory: False  # True only with --debug option and GPU device
      device: cpu
      epochs: 2000
      hidden_units:
        - 128
        - 256
      optimizer:
        - class_name: pydgn.training.callback.optimizer.Optimizer
          args:
            optimizer_class_name: torch.optim.Adam
            lr: 0.001
            weight_decay:
              - 0.
              - 0.0005
      loss:  pydgn.training.callback.metric.MulticlassClassification
      scorer: pydgn.training.callback.metric.MulticlassAccuracy
      readout: readout.CGMMGraphReadout
      engine: pydgn.training.engine.TrainingEngine
      early_stopper:
        - class_name:
            - pydgn.training.callback.early_stopping.PatienceEarlyStopper
          args:
            patience:
              - 100
            monitor: validation_MulticlassAccuracy # (train_,validation_)[name_of_the_scorer_or_loss_to_monitor]
            mode: max
            checkpoint: True
      plotter: pydgn.training.callback.plotter.Plotter
